#!/usr/local/bin/python3
import requests
import sys
from bs4 import BeautifulSoup
import json
import math

shardcount=2304

def info_from_guild(shardcount):
    guild_ID=sys.argv[1]
    url_combined = str("https://web.rythmbot.co/ajax/shard/" + guild_ID)
    page = requests.get(url_combined)
    python_obj = json.loads(page.text)
    shard_ID=int(python_obj["shard"])
    cluster_ID=int(python_obj["cluster"])
    print(f"\nshard:\t\t{shard_ID}\ncluster:\t{cluster_ID}\n")
    rawstat = requests.get("https://status.rythmbot.co/raw")
    print(f"{shard_ID}:", json.loads(rawstat.text)[str(shard_ID)])

def info_all(shardcount):
    onlinecount=0
    initi=[]
    initd=[]
    log=[]
    webs=[]
    ident=[]
    awaiting=[]
    load=[]
    recon=[]
    attempt=[]
    waitcon=[]
    queue=[]
    missing=[]
    rawstat = requests.get("https://status.rythmbot.co/raw")
    raw=json.loads(rawstat.text)
    print(type(raw))
    for i in raw:
        if raw[str(i)]=="CONNECTED":
            onlinecount=onlinecount+1
        elif raw[str(i)]=="INITIALIZING":
            initi.append(str(i))
        elif raw[str(i)]=="INITIALIZED":
            initd.append(str(i))
        elif raw[str(i)]=="LOGGING_IN":
            log.append(str(i))
        elif raw[str(i)]=="CONNECTING_TO_WEBSOCKET":
            webs.append(str(i))
        elif raw[str(i)]=="IDENTIFYING_SESSION":
            ident.append(str(i))
        elif raw[str(i)]=="AWAITING_LOGIN_CONFIRMATION":
            awaiting.append(str(i))
        elif raw[str(i)]=="LOADING_SUBSYSTEMS":
            load.append(str(i))
        elif raw[str(i)]=="RECONNECTING":
            recon.append(str(i))
        elif raw[str(i)]=="ATTEMPTING_TO_RECONNECT":
            attempt.append(str(i))
        elif raw[str(i)]=="WAITING_TO_RECONNECT":
            waitcon.append(str(i))
        elif raw[str(i)]=="RECONNECT_QUEUED":
            queue.append(str(i))
        else:
            missing.append(str(i))
    if onlinecount==shardcount:
        print("Rythm is fully operational!")
        print("-----------------------------")
        print(onlinecount, "\t Online")
    else:
        print("Rythm is ", round(((onlinecount)/shardcount), 1)*100, "% online")
        print("------------------------------")
        print(onlinecount, "\t Online")
        problems=shardcount-onlinecount
        print("------------------------------")
        print("Count\t Status\t\t\t Shards\n")
        print(problems, "\t Shards with issues")
        if len(queue) != 0:
            print(len(queue), "\t In reconnect queue\t", getstr(queue))
        if len(waitcon) != 0:
            print(len(waitcon), "\t Waiting to reconnect\t", getstr(waitcon))
        if len(load) != 0:
            print(len(load), "\t Loading subsystems\t", getstr(load))
        if len(awaiting) != 0:
            print(len(awaiting), "\t Awaiting confirmation\t", getstr(awaiting))
        if len(initi) != 0:
            print(len(initi), "\t Initialising\t\t", getstr(initi))
        if len(initd) != 0:
            print(len(initd), "\t Initialised\t\t", getstr(initd))
        if len(log) != 0:
            print(len(log), "\t Logging in\t\t", getstr(log))
        if len(webs) != 0:
            print(len(webs), "\t Connecting to websocket", getstr(webs))
        if len(ident) != 0:
            print(len(ident), "\t Identifying\t\t", getstr(ident))
        if len(recon) != 0:
            print(len(recon), "\t Reconnecting\t\t", getstr(recon))
        if len(attempt) != 0:
            print(len(attempt), "\t Attempting to reconnect", getstr(attempt))
        if len(missing) != 0:
            print(len(missing), "\t Data missing", getstr(missing))


def getstr(arre):
    if len(arre)>5:
        return "..."
    elif len(arre)==0:
        return ""
    else:
        arre_s=">"
        for i in arre:
            arre_s=arre_s+i+", "
        return arre_s

def info_from_shard(shardcount):
    shard_ID=sys.argv[2]
    print("shard:\t\t", shard_ID)
    print("cluster:\t", math.floor(int(shard_ID)/int(math.ceil(shardcount/9))))
    rawstat = requests.get("https://status.rythmbot.co/raw")
    print("status:\t\t", json.loads(rawstat.text)[str(shard_ID)])

def info_from_cluster(shardcount):
    onlinecount=0
    issues_array=[]
    rawstat = requests.get("https://status.rythmbot.co/raw")
    raw=json.loads(rawstat.text)
    for i in raw:
        if raw[str(i)]=="CONNECTED":
            onlinecount=onlinecount+1
        else:
            shard_ID=int(i)
            cluster_ID=math.floor(int(shard_ID)/int(math.ceil(shardcount/9)))
            issues_array.append([shard_ID, cluster_ID])
    cluster0=[]
    cluster1=[]
    cluster2=[]
    cluster3=[]
    cluster4=[]
    cluster5=[]
    cluster6=[]
    cluster7=[]
    cluster8=[]
    cluster9=[]
    for j in issues_array:
        if (j[1])==0:
            cluster0.append(j)
        if (j[1])==1:
            cluster1.append(j)
        if (j[1])==2:
            cluster2.append(j)
        if (j[1])==3:
            cluster3.append(j)
        if (j[1])==4:
            cluster4.append(j)
        if (j[1])==5:
            cluster5.append(j)
        if (j[1])==6:
            cluster6.append(j)
        if (j[1])==7:
            cluster7.append(j)
        if (j[1])==8:
            cluster8.append(j)
        if (j[1])==9:
            cluster9.append(j)
        ###
    print("cluster info:\ntotal issues:\t", len(issues_array))
    if len(cluster0)!=0:
        print("rc 0 issues\t", len(cluster0))
    if len(cluster1)!=0:
        print("rc 1 issues\t", len(cluster1))
    if len(cluster2)!=0:
        print("rc 2 issues\t", len(cluster2))
    if len(cluster3)!=0:
        print("rc 3 issues\t", len(cluster3))
    if len(cluster4)!=0:
        print("rc 4 issues\t", len(cluster4))
    if len(cluster5)!=0:
        print("rc 5 issues\t", len(cluster5))
    if len(cluster6)!=0:
        print("rc 6 issues\t", len(cluster6))
    if len(cluster7)!=0:
        print("rc 7 issues\t", len(cluster7))
    if len(cluster8)!=0:
        print("rc 8 issues\t", len(cluster8))
    if len(cluster9)!=0:
        print("rc 9 issues\t", len(cluster9))






if sys.argv[1] == "h":
    print("ry cli help\nry h\t\tdisplays this help command\nry <guild>\tshows the shard, cluster, and status for a guild\nry f <shard>\tshows the cluster and status for a shard\nry s\t\tshows the full status for rythm")
elif sys.argv[1] == "s":
    info_all(shardcount)
elif sys.argv[1] == "status":
    info_all(shardcount)
elif sys.argv[1] == "shard":
    info_from_shard(shardcount)
elif sys.argv[1] == "f":
    info_from_shard(shardcount)
elif sys.argv[1] == "c":
    info_from_cluster(shardcount)
else:
    info_from_guild(shardcount)
